// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpchantesting/test.proto

package grpchantesting

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Payload              []byte            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Count                int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Code                 int32             `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	DelayMillis          int32             `protobuf:"varint,4,opt,name=delay_millis,json=delayMillis,proto3" json:"delay_millis,omitempty"`
	Headers              map[string][]byte `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Trailers             map[string][]byte `protobuf:"bytes,6,rep,name=trailers,proto3" json:"trailers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ErrorDetails         []*any.Any        `protobuf:"bytes,7,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_308758599e80580c, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Message) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Message) GetDelayMillis() int32 {
	if m != nil {
		return m.DelayMillis
	}
	return 0
}

func (m *Message) GetHeaders() map[string][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Message) GetTrailers() map[string][]byte {
	if m != nil {
		return m.Trailers
	}
	return nil
}

func (m *Message) GetErrorDetails() []*any.Any {
	if m != nil {
		return m.ErrorDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "grpchantesting.Message")
	proto.RegisterMapType((map[string][]byte)(nil), "grpchantesting.Message.HeadersEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "grpchantesting.Message.TrailersEntry")
}

func init() {
	proto.RegisterFile("grpchantesting/test.proto", fileDescriptor_308758599e80580c)
}

var fileDescriptor_308758599e80580c = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x95, 0x66, 0x59, 0xe0, 0x35, 0x43, 0xc8, 0x9a, 0x58, 0x16, 0x2e, 0x05, 0x81, 0x94,
	0x53, 0x3a, 0x8d, 0x0b, 0x1b, 0x12, 0xd2, 0x06, 0x95, 0xe0, 0xb0, 0x4b, 0xda, 0x9e, 0x2b, 0x37,
	0x79, 0xa4, 0x16, 0xae, 0x1d, 0xd9, 0x6e, 0x21, 0x9f, 0x88, 0x8f, 0xc5, 0x57, 0x41, 0x76, 0x52,
	0x44, 0x99, 0x72, 0x68, 0x4f, 0xf1, 0x7b, 0xff, 0xf7, 0x7e, 0xfa, 0xfb, 0x1f, 0xc3, 0x65, 0xa5,
	0xea, 0x62, 0x45, 0x85, 0x41, 0x6d, 0x98, 0xa8, 0xc6, 0xf6, 0x9b, 0xd5, 0x4a, 0x1a, 0x49, 0x9e,
	0xed, 0x4b, 0xc9, 0x65, 0x25, 0x65, 0xc5, 0x71, 0xec, 0xd4, 0xe5, 0xe6, 0xdb, 0x98, 0x8a, 0xa6,
	0x1d, 0x4d, 0x5e, 0xfe, 0x2f, 0xe1, 0xba, 0x36, 0x9d, 0xf8, 0xfa, 0x97, 0x0f, 0xe1, 0x03, 0x6a,
	0x4d, 0x2b, 0x24, 0x31, 0x84, 0x35, 0x6d, 0xb8, 0xa4, 0x65, 0xec, 0x8d, 0xbc, 0x34, 0xca, 0x77,
	0x25, 0x39, 0x87, 0xa0, 0x90, 0x1b, 0x61, 0xe2, 0xc1, 0xc8, 0x4b, 0x83, 0xbc, 0x2d, 0x08, 0x81,
	0x93, 0x42, 0x96, 0x18, 0xfb, 0xae, 0xe9, 0xce, 0xe4, 0x15, 0x44, 0x25, 0x72, 0xda, 0x2c, 0xd6,
	0x8c, 0x73, 0xa6, 0xe3, 0x13, 0xa7, 0x0d, 0x5d, 0xef, 0xc1, 0xb5, 0xc8, 0x47, 0x08, 0x57, 0x48,
	0x4b, 0x54, 0x3a, 0x0e, 0x46, 0x7e, 0x3a, 0xbc, 0x7e, 0x93, 0xed, 0x5f, 0x26, 0xeb, 0x0c, 0x65,
	0x5f, 0xda, 0xb1, 0x89, 0x30, 0xaa, 0xc9, 0x77, 0x4b, 0xe4, 0x0e, 0x9e, 0x18, 0x45, 0x19, 0xb7,
	0x80, 0x53, 0x07, 0x78, 0xdb, 0x07, 0x98, 0x75, 0x73, 0x2d, 0xe1, 0xef, 0x1a, 0xb9, 0x81, 0x33,
	0x54, 0x4a, 0xaa, 0x45, 0x89, 0x86, 0x32, 0xae, 0xe3, 0xd0, 0x71, 0xce, 0xb3, 0x36, 0xaa, 0x6c,
	0x17, 0x55, 0x76, 0x27, 0x9a, 0x3c, 0x72, 0xa3, 0x9f, 0xdb, 0xc9, 0xe4, 0x16, 0xa2, 0x7f, 0x6d,
	0x91, 0xe7, 0xe0, 0x7f, 0xc7, 0xc6, 0x05, 0xf6, 0x34, 0xb7, 0x47, 0x1b, 0xd6, 0x96, 0xf2, 0x0d,
	0xba, 0xb0, 0xa2, 0xbc, 0x2d, 0x6e, 0x07, 0xef, 0xbd, 0xe4, 0x03, 0x9c, 0xed, 0x39, 0x3a, 0x64,
	0xf9, 0xfa, 0xf7, 0x00, 0x86, 0x33, 0xd4, 0x66, 0x8a, 0x6a, 0xcb, 0x0a, 0x24, 0x37, 0x10, 0xcc,
	0x05, 0x55, 0x0d, 0xb9, 0xe8, 0xb9, 0x7d, 0xd2, 0x27, 0x90, 0x7b, 0x88, 0x3e, 0x71, 0x86, 0xc2,
	0x4c, 0x8d, 0x42, 0xba, 0x3e, 0x9c, 0x90, 0x7a, 0x96, 0x61, 0x9d, 0xa0, 0x3a, 0x96, 0x71, 0x65,
	0x19, 0x70, 0xcf, 0x4a, 0x76, 0xbc, 0x8b, 0x2b, 0x8f, 0x7c, 0x85, 0x8b, 0xb9, 0xc6, 0xc9, 0x4f,
	0x83, 0x4a, 0x50, 0xde, 0x29, 0xb3, 0x1f, 0x36, 0xa1, 0x17, 0x8f, 0x7e, 0xe7, 0xc4, 0xbe, 0xfc,
	0xa4, 0xa7, 0xbf, 0x3c, 0x75, 0xf5, 0xbb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x71, 0x3d, 0x8a,
	0x5b, 0x77, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestService_ServerStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_BidiStreamClient, error)
	// UseExternalMessageTwice is here purely to test the protoc-gen-grpchan plug-in
	UseExternalMessageTwice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/grpchantesting.TestService/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/grpchantesting.TestService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceClientStreamClient{stream}
	return x, nil
}

type TestService_ClientStreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type testServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceClientStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceClientStreamClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/grpchantesting.TestService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type testServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[2], "/grpchantesting.TestService/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceBidiStreamClient{stream}
	return x, nil
}

type TestService_BidiStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type testServiceBidiStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceBidiStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceBidiStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) UseExternalMessageTwice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpchantesting.TestService/UseExternalMessageTwice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	Unary(context.Context, *Message) (*Message, error)
	ClientStream(TestService_ClientStreamServer) error
	ServerStream(*Message, TestService_ServerStreamServer) error
	BidiStream(TestService_BidiStreamServer) error
	// UseExternalMessageTwice is here purely to test the protoc-gen-grpchan plug-in
	UseExternalMessageTwice(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (*UnimplementedTestServiceServer) Unary(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (*UnimplementedTestServiceServer) ClientStream(srv TestService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedTestServiceServer) ServerStream(req *Message, srv TestService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (*UnimplementedTestServiceServer) BidiStream(srv TestService_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (*UnimplementedTestServiceServer) UseExternalMessageTwice(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseExternalMessageTwice not implemented")
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpchantesting.TestService/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Unary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).ClientStream(&testServiceClientStreamServer{stream})
}

type TestService_ClientStreamServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceClientStreamServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceClientStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).ServerStream(m, &testServiceServerStreamServer{stream})
}

type TestService_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type testServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).BidiStream(&testServiceBidiStreamServer{stream})
}

type TestService_BidiStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testServiceBidiStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceBidiStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceBidiStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_UseExternalMessageTwice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UseExternalMessageTwice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpchantesting.TestService/UseExternalMessageTwice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UseExternalMessageTwice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpchantesting.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _TestService_Unary_Handler,
		},
		{
			MethodName: "UseExternalMessageTwice",
			Handler:    _TestService_UseExternalMessageTwice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _TestService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _TestService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _TestService_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpchantesting/test.proto",
}
