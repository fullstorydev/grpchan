// Code generated by protoc-gen-grpchan. DO NOT EDIT.
// source: test.proto

package grpchantesting

import "context"
import "github.com/fullstorydev/grpchan"
import "google.golang.org/grpc"
import "google.golang.org/protobuf/types/known/emptypb"

// Deprecated: Use RegisterTestServiceServer instead.
func RegisterHandlerTestService(reg grpchan.ServiceRegistry, srv TestServiceServer) {
	reg.RegisterService(&TestService_ServiceDesc, srv)
}

type testServiceChannelClient struct {
	ch grpc.ClientConnInterface
}

// Deprecated: Use NewTestServiceClient instead.
func NewTestServiceChannelClient(ch grpc.ClientConnInterface) TestServiceClient {
	return &testServiceChannelClient{ch: ch}
}

func (c *testServiceChannelClient) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.ch.Invoke(ctx, "/grpchantesting.TestService/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceChannelClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientStreamClient, error) {
	stream, err := c.ch.NewStream(ctx, &TestService_ServiceDesc.Streams[0], "/grpchantesting.TestService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceClientStreamClient{stream}
	return x, nil
}

func (c *testServiceChannelClient) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestService_ServerStreamClient, error) {
	stream, err := c.ch.NewStream(ctx, &TestService_ServiceDesc.Streams[1], "/grpchantesting.TestService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

func (c *testServiceChannelClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (TestService_BidiStreamClient, error) {
	stream, err := c.ch.NewStream(ctx, &TestService_ServiceDesc.Streams[2], "/grpchantesting.TestService/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceBidiStreamClient{stream}
	return x, nil
}

func (c *testServiceChannelClient) UseExternalMessageTwice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.ch.Invoke(ctx, "/grpchantesting.TestService/UseExternalMessageTwice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
