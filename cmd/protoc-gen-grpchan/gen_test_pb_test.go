// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gen_test.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Test struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b9b685204736b2, []int{0}
}

func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Test) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Test)(nil), "main.Test")
}

func init() {
	proto.RegisterFile("gen_test.proto", fileDescriptor_30b9b685204736b2)
}

var fileDescriptor_30b9b685204736b2 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4f, 0xcd, 0x8b,
	0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc,
	0x53, 0xd2, 0xe2, 0x62, 0x09, 0x49, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0x36, 0xb2, 0x72, 0x71, 0x83, 0x14,
	0x07, 0x97, 0x14, 0xa5, 0x26, 0xe6, 0x16, 0x0b, 0x29, 0x70, 0xb1, 0x85, 0xe6, 0x25, 0x16, 0x55,
	0x1a, 0x0a, 0x71, 0xe9, 0x81, 0x0c, 0xd3, 0x03, 0x49, 0x4a, 0x21, 0xb1, 0xe1, 0x2a, 0x8c, 0x70,
	0xaa, 0x50, 0xe6, 0x62, 0x87, 0x18, 0x87, 0xd3, 0x10, 0x0d, 0x46, 0xb8, 0x31, 0xc6, 0x38, 0x8d,
	0x51, 0x85, 0x19, 0x63, 0x84, 0xdb, 0x18, 0x03, 0x84, 0x41, 0x26, 0x04, 0x5d, 0x6c, 0x4a, 0xd8,
	0xc5, 0x38, 0x5d, 0x83, 0x64, 0x91, 0x19, 0x41, 0x8b, 0xcc, 0x09, 0xaa, 0xb0, 0x20, 0xec, 0x14,
	0x13, 0x3c, 0x81, 0x07, 0x57, 0x64, 0x4a, 0x84, 0x7b, 0x2d, 0x71, 0xda, 0xa5, 0xc8, 0xc5, 0x0e,
	0x89, 0x6c, 0x03, 0xc2, 0x4a, 0x0c, 0x09, 0xc7, 0x93, 0x19, 0xde, 0x78, 0x82, 0x2b, 0x33, 0xc7,
	0xab, 0x0c, 0x6e, 0x21, 0xce, 0x58, 0x4f, 0x62, 0x03, 0x27, 0x76, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcf, 0x12, 0x64, 0x7a, 0xfe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestStreamsClient is the client API for TestStreams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestStreamsClient interface {
	Unary1(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Unary2(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Stream1(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream1Client, error)
	Unary3(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Stream2(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream2Client, error)
	Unary4(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Unary5(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Stream3(ctx context.Context, in *Test, opts ...grpc.CallOption) (TestStreams_Stream3Client, error)
	Unary6(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Unary7(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Unary8(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Stream4(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream4Client, error)
	Stream5(ctx context.Context, in *Test, opts ...grpc.CallOption) (TestStreams_Stream5Client, error)
	Unary9(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Unary10(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Unary11(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Stream6(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream6Client, error)
	Stream7(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream7Client, error)
	Unary12(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
}

type testStreamsClient struct {
	cc grpc.ClientConnInterface
}

func NewTestStreamsClient(cc grpc.ClientConnInterface) TestStreamsClient {
	return &testStreamsClient{cc}
}

func (c *testStreamsClient) Unary1(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Unary2(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Stream1(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[0], "/main.TestStreams/Stream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream1Client{stream}
	return x, nil
}

type TestStreams_Stream1Client interface {
	Send(*Test) error
	CloseAndRecv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream1Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream1Client) Send(m *Test) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamsStream1Client) CloseAndRecv() (*Test, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Unary3(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Stream2(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[1], "/main.TestStreams/Stream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream2Client{stream}
	return x, nil
}

type TestStreams_Stream2Client interface {
	Send(*Test) error
	Recv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream2Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream2Client) Send(m *Test) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamsStream2Client) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Unary4(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Unary5(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary5", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Stream3(ctx context.Context, in *Test, opts ...grpc.CallOption) (TestStreams_Stream3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[2], "/main.TestStreams/Stream3", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream3Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestStreams_Stream3Client interface {
	Recv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream3Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream3Client) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Unary6(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Unary7(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary7", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Unary8(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Stream4(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream4Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[3], "/main.TestStreams/Stream4", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream4Client{stream}
	return x, nil
}

type TestStreams_Stream4Client interface {
	Send(*Test) error
	CloseAndRecv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream4Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream4Client) Send(m *Test) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamsStream4Client) CloseAndRecv() (*Test, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Stream5(ctx context.Context, in *Test, opts ...grpc.CallOption) (TestStreams_Stream5Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[4], "/main.TestStreams/Stream5", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream5Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestStreams_Stream5Client interface {
	Recv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream5Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream5Client) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Unary9(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary9", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Unary10(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary10", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Unary11(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary11", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testStreamsClient) Stream6(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream6Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[5], "/main.TestStreams/Stream6", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream6Client{stream}
	return x, nil
}

type TestStreams_Stream6Client interface {
	Send(*Test) error
	Recv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream6Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream6Client) Send(m *Test) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamsStream6Client) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Stream7(ctx context.Context, opts ...grpc.CallOption) (TestStreams_Stream7Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestStreams_serviceDesc.Streams[6], "/main.TestStreams/Stream7", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamsStream7Client{stream}
	return x, nil
}

type TestStreams_Stream7Client interface {
	Send(*Test) error
	Recv() (*Test, error)
	grpc.ClientStream
}

type testStreamsStream7Client struct {
	grpc.ClientStream
}

func (x *testStreamsStream7Client) Send(m *Test) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamsStream7Client) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testStreamsClient) Unary12(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/main.TestStreams/Unary12", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestStreamsServer is the server API for TestStreams service.
type TestStreamsServer interface {
	Unary1(context.Context, *Test) (*Test, error)
	Unary2(context.Context, *Test) (*Test, error)
	Stream1(TestStreams_Stream1Server) error
	Unary3(context.Context, *Test) (*Test, error)
	Stream2(TestStreams_Stream2Server) error
	Unary4(context.Context, *Test) (*Test, error)
	Unary5(context.Context, *Test) (*Test, error)
	Stream3(*Test, TestStreams_Stream3Server) error
	Unary6(context.Context, *Test) (*Test, error)
	Unary7(context.Context, *Test) (*Test, error)
	Unary8(context.Context, *Test) (*Test, error)
	Stream4(TestStreams_Stream4Server) error
	Stream5(*Test, TestStreams_Stream5Server) error
	Unary9(context.Context, *Test) (*Test, error)
	Unary10(context.Context, *Test) (*Test, error)
	Unary11(context.Context, *Test) (*Test, error)
	Stream6(TestStreams_Stream6Server) error
	Stream7(TestStreams_Stream7Server) error
	Unary12(context.Context, *Test) (*Test, error)
}

// UnimplementedTestStreamsServer can be embedded to have forward compatible implementations.
type UnimplementedTestStreamsServer struct {
}

func (*UnimplementedTestStreamsServer) Unary1(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary1 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary2(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary2 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream1(srv TestStreams_Stream1Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream1 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary3(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary3 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream2(srv TestStreams_Stream2Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream2 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary4(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary4 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary5(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary5 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream3(req *Test, srv TestStreams_Stream3Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream3 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary6(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary6 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary7(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary7 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary8(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary8 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream4(srv TestStreams_Stream4Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream4 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream5(req *Test, srv TestStreams_Stream5Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream5 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary9(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary9 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary10(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary10 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary11(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary11 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream6(srv TestStreams_Stream6Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream6 not implemented")
}
func (*UnimplementedTestStreamsServer) Stream7(srv TestStreams_Stream7Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream7 not implemented")
}
func (*UnimplementedTestStreamsServer) Unary12(ctx context.Context, req *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary12 not implemented")
}

func RegisterTestStreamsServer(s *grpc.Server, srv TestStreamsServer) {
	s.RegisterService(&_TestStreams_serviceDesc, srv)
}

func _TestStreams_Unary1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary1(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Unary2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary2(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Stream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestStreamsServer).Stream1(&testStreamsStream1Server{stream})
}

type TestStreams_Stream1Server interface {
	SendAndClose(*Test) error
	Recv() (*Test, error)
	grpc.ServerStream
}

type testStreamsStream1Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream1Server) SendAndClose(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamsStream1Server) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestStreams_Unary3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary3(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Stream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestStreamsServer).Stream2(&testStreamsStream2Server{stream})
}

type TestStreams_Stream2Server interface {
	Send(*Test) error
	Recv() (*Test, error)
	grpc.ServerStream
}

type testStreamsStream2Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream2Server) Send(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamsStream2Server) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestStreams_Unary4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary4(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Unary5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary5",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary5(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Stream3_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Test)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestStreamsServer).Stream3(m, &testStreamsStream3Server{stream})
}

type TestStreams_Stream3Server interface {
	Send(*Test) error
	grpc.ServerStream
}

type testStreamsStream3Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream3Server) Send(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func _TestStreams_Unary6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary6(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Unary7_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary7(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary7",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary7(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Unary8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary8(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Stream4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestStreamsServer).Stream4(&testStreamsStream4Server{stream})
}

type TestStreams_Stream4Server interface {
	SendAndClose(*Test) error
	Recv() (*Test, error)
	grpc.ServerStream
}

type testStreamsStream4Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream4Server) SendAndClose(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamsStream4Server) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestStreams_Stream5_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Test)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestStreamsServer).Stream5(m, &testStreamsStream5Server{stream})
}

type TestStreams_Stream5Server interface {
	Send(*Test) error
	grpc.ServerStream
}

type testStreamsStream5Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream5Server) Send(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func _TestStreams_Unary9_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary9(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary9",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary9(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Unary10_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary10(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary10",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary10(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Unary11_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary11(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary11",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary11(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestStreams_Stream6_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestStreamsServer).Stream6(&testStreamsStream6Server{stream})
}

type TestStreams_Stream6Server interface {
	Send(*Test) error
	Recv() (*Test, error)
	grpc.ServerStream
}

type testStreamsStream6Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream6Server) Send(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamsStream6Server) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestStreams_Stream7_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestStreamsServer).Stream7(&testStreamsStream7Server{stream})
}

type TestStreams_Stream7Server interface {
	Send(*Test) error
	Recv() (*Test, error)
	grpc.ServerStream
}

type testStreamsStream7Server struct {
	grpc.ServerStream
}

func (x *testStreamsStream7Server) Send(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamsStream7Server) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestStreams_Unary12_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestStreamsServer).Unary12(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.TestStreams/Unary12",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestStreamsServer).Unary12(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestStreams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.TestStreams",
	HandlerType: (*TestStreamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary1",
			Handler:    _TestStreams_Unary1_Handler,
		},
		{
			MethodName: "Unary2",
			Handler:    _TestStreams_Unary2_Handler,
		},
		{
			MethodName: "Unary3",
			Handler:    _TestStreams_Unary3_Handler,
		},
		{
			MethodName: "Unary4",
			Handler:    _TestStreams_Unary4_Handler,
		},
		{
			MethodName: "Unary5",
			Handler:    _TestStreams_Unary5_Handler,
		},
		{
			MethodName: "Unary6",
			Handler:    _TestStreams_Unary6_Handler,
		},
		{
			MethodName: "Unary7",
			Handler:    _TestStreams_Unary7_Handler,
		},
		{
			MethodName: "Unary8",
			Handler:    _TestStreams_Unary8_Handler,
		},
		{
			MethodName: "Unary9",
			Handler:    _TestStreams_Unary9_Handler,
		},
		{
			MethodName: "Unary10",
			Handler:    _TestStreams_Unary10_Handler,
		},
		{
			MethodName: "Unary11",
			Handler:    _TestStreams_Unary11_Handler,
		},
		{
			MethodName: "Unary12",
			Handler:    _TestStreams_Unary12_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream1",
			Handler:       _TestStreams_Stream1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream2",
			Handler:       _TestStreams_Stream2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream3",
			Handler:       _TestStreams_Stream3_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream4",
			Handler:       _TestStreams_Stream4_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream5",
			Handler:       _TestStreams_Stream5_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream6",
			Handler:       _TestStreams_Stream6_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream7",
			Handler:       _TestStreams_Stream7_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gen_test.proto",
}
